#!/usr/bin/bash

# Example for $XDG_CONFIG_HOME/sxiv/exec/key-handler
# Called by sxiv(1) after the external prefix key (C-x by default) is pressed.
# The next key combo is passed as its first argument. Passed via stdin are the
# images to act upon, one path per line: all marked images, if in thumbnail
# mode and at least one image has been marked, otherwise the current image.
# sxiv(1) blocks until this script terminates. It then checks which images
# have been modified and reloads them.

# The key combo argument has the following form: "[C-][M-][S-]KEY",
# where C/M/S indicate Ctrl/Meta(Alt)/Shift modifier states and KEY is the X
# keysym as listed in /usr/include/X11/keysymdef.h without the "XK_" prefix.

rotate() {
    degree="$1"
    tr '\n' '\0' | xargs -0 realpath | sort | uniq | while read file; do
        case "$(file -b -i "$file")" in
        image/jpeg*) jpegtran -rotate "$degree" -copy all -outfile "$file" "$file" ;;
        *)           mogrify  -rotate "$degree" "$file" ;;
        esac
    done
}

case "$1" in
"C-x")      xclip -in -filter | tr '\n' ' ' | xclip -in -selection clipboard ;;
"C-c")      while read file; do xclip -selection clipboard -target image/png "$file"; done ;;
"y")        while read file; do notify-send -i "$file" "Image copied"   ; dragon-drag-and-drop "$file"                  ; done ;;
"m")        while read file; do alacritty --title "$file" --command sh -c "exiv2 pr -q -pa '$file' | less" & done ;;
"g")        tr '\n' '\0' | xargs -0 gimp & ;;
"d")        while read file; do notify-send -i "$file" "Image deleted." ; rm "$file"                                    ; done ;;
"w")        while read file; do hsetroot -screens 1 -cover "$file"      ; notify-send -i "$file" "Wallpaper changed."   ; done ;;
"f")        while read file; do convert -flop "$file" "$file"           ; notify-send -i "$file" "Image flopped."       ; done ;;
"F")        while read file; do convert -flip "$file" "$file"           ; notify-send -i "$file" "Image flopped."       ; done ;;
">")        while read file; do convert -rotate 90 "$file" "$file"      ; notify-send -i "$file" "Image rotated."       ; done ;;
"<")        while read file; do convert -rotate -90 "$file" "$file"     ; notify-send -i "$file" "Image rotated."       ; done ;;
esac
