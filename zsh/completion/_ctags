#compdef ctags

# zsh completions for 'ctags'
# automatically generated with http://github.com/RobSis/zsh-completion-generator
local arguments

arguments=(
  '-a[append the tags to an existing tag file.]'
  '-B[use backward searching patterns (?...?).]'
  '-D[<definition>]'
  '-e[output tag file for use with Emacs.]'
  '-f[write tags to specified file. Value of "-" writes tags to stdout]'
  '-F[use forward searching patterns (/.../; default).]'
  '-G[equivalent to --guess-language-eagerly.]'
  '-h[specify list of file extensions to be treated as include files]'
  '-I[@file>]'
  '-L[A list of input file names is read from the specified file.]'
  '-n[equivalent to --excmd=number.]'
  '-N[equivalent to --excmd=pattern.]'
  '-o[alternative for -f.]'
  '-R[equivalent to --recurse.]'
  '-u[equivalent to --sort=no.]'
  '-V[equivalent to --verbose.]'
  '-x[print a tabular cross reference file to standard output.]'
  '--alias-[<LANG>=\[+|-\]aliasPattern]'
  '--append[should tags should be appended to existing tag file \[no\]?]'
  '--etags-include[include reference to file in Emacs-style tag file (requires -e).]'
  '--exclude[exclude files and directories matching pattern.]'
  '--excmd[uses the specified type of EX command to locate tags \[mix\].]'
  '--extras[+|-\]flags]'
  '--extras-[<LANG|all>=\[+|-\]flags]'
  '--fields[+|-\]flags]'
  '--fields-[<LANG|all>=\[+|-\]flags]'
  '--file-scope[should tags scoped only for a single file (e.g. "static" tags)]'
  '--filter[behave as a filter, reading file names from standard input and]'
  '--filter-terminator[specify string to print to stdout following the tags for each file]'
  '--format[force output of specified tag file format \[2\].]'
  '--guess-language-eagerly[guess the language of input file more eagerly]'
  '--help[print this option summary.]'
  '--help-full[print this option summary including experimental features.]'
  '--if0[should code within #if 0 conditional branches be parsed \[no\]?]'
  '--input-encoding[specify encoding of all input files.]'
  '--input-encoding-[<LANG>=encoding]'
  '--kinddef-[<LANG>=letter,name,desc]'
  '--kinds-[<LANG>=\[+|-\]kinds, or]'
  '--langdef[define a new language to be parsed with regular expressions.]'
  '--langmap[(s)]'
  '--language-force[force all files to be interpreted using specified language.]'
  '--languages[+|-\]list]'
  '--license[print details of software license.]'
  '--line-directives[should #line directives be processed \[no\]?]'
  '--links[indicate whether symbolic links should be followed \[yes\].]'
  '--list-aliases[output list of alias patterns.]'
  '--list-excludes[output list of exclude patterns for excluding files/directories.]'
  '--list-extras[output list of extra tag flags.]'
  '--list-features[output list of compiled features.]'
  '--list-fields[output list of fields.]'
  '--list-kinds[output a list of all tag kinds for specified language or all.]'
  '--list-kinds-full[list the details of all tag kinds for specified language or all]'
  '--list-languages[output list of supported languages.]'
  '--list-map-extensions[output list of language extensions in mapping.]'
  '--list-map-patterns[output list of language patterns in mapping.]'
  '--list-maps[output list of language mappings(both extensions and patterns).]'
  '--list-mline-regex-flags[output list of flags which can be used in a multiline regex parser definition.]'
  '--list-params[output list of language parameters. This works with --machinable.]'
  '--list-pseudo-tags[output list of pseudo tags.]'
  '--list-regex-flags[output list of flags which can be used in a regex parser definition.]'
  '--list-roles[.\[kindspecs|*\]\]]'
  '--list-subparsers[output list of subparsers for the base language.]'
  '--machinable[use tab separated representation in --list- option output. \[no\]]'
  '--list-[{aliases,extras,features,fields,kind-full,langdef-flags,params]'
  '--map-[<LANG>=\[+|-\]extension|pattern]'
  '--maxdepth[specify maximum recursion depth.]'
  '--mline-regex-[<LANG>=/line_pattern/name_pattern/\[flags\]]'
  '--options[specify file(or directory) from which command line options should be read.]'
  '--options-maybe[do the same as --options but this doesnt make an error for non-existing file.]'
  '--optlib-dir[+\]DIR]'
  '--output-encoding[the encoding to write the tag file in. Defaults to UTF-8 if --input-encoding]'
  '--output-format[specify the output format. \[u-ctags\]]'
  '--param-[<LANG>:name=argument]'
  '--pattern-length-limit[cutoff patterns of tag entries after N characters. Disable by setting to 0. \[96\]]'
  '--print-language[dont make tags file but just print the guessed language name for]'
  '--pseudo-tags[+|-\]ptag]'
  '--pseudo-tags[enable/disable emitting pseudo tag named ptag.]'
  '--put-field-prefix[put "UCTAGS" as prefix for the name of fields newly introduced in]'
  '--quiet[dont print NOTICE class messages \[no\].]'
  '--recurse[recurse into directories supplied on command line \[no\].]'
  '--regex-[<LANG>=/line_pattern/name_pattern/\[flags\]]'
  '--sort[should tags be sorted (optionally ignoring case) \[yes\]?]'
  '--tag-relative[should paths be relative to location of tag file \[no; yes when -e\]?]'
  '--totals[print statistics about input and tag files \[no\].]'
  '--verbose[enable verbose messages describing actions on each input file.]'
  '--version[print version identifier to standard output.]'
  '--with-list-header[prepend the column descriptions in --list- output. \[yes\]]'
  '--list-[{aliases,extras,features,fields,kind-full,langdef-flags,params]'
  '*:filename:_files'
)

_arguments -s $arguments
